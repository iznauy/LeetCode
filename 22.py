class Solution(object): #really really talented    def generateParenthesis(self, n):        def generate(p, left, right, parens=[]):            if left:                generate(p + "(", left-1, right)            if right > left:                generate(p + ")", left, right-1)            if not right:                parens.append(p)            return parens        return generate('', n, n)class Solution1(object):    def generateParenthesis(self, n):        def generate(p, left, right):            if right >= left >= 0:                if not right:                    yield p                for q in generate(p + '(', left-1, right):                    yield q                for q in generate(p + ')', left, right-1):                    yield q        return list(generate('', n, n))class Solution2(object): # really really difficult to understand    """    Parameter open tells the number of "already opened" parentheses,    and I continue the recursion as long as I still have to open    parentheses (n > 0) and I haven't made a mistake yet (open >= 0).    """    def generateParenthesis(self, n, open=0):        if n > 0 and open >= 0:            return ['(' + p for p in self.generateParenthesis(n-1, open+1)] + \                   [')' + p for p in self.generateParenthesis(n, open-1)]        return [')' * open] * (not n)class MySolution(object): #wrong    def generateParenthesis(self, n):        """        :type n: int        :rtype: List[str]        """        if n == 0:            return []        elif n == 1:            return ["()"]        else:            lst = self.generateParenthesis(n-1)            temp = []            for i in range(len(lst)):                temp.append('(' + lst[i] + ')')                temp.append('()' + lst[i])                temp.append(lst[i] + '()')            result = []            for i in set(temp):                result.append(i)            return result